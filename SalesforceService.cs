namespace SalesforceNET
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Xml;

    using Attributes;
    using Entities;
    using OpenAuthorization;
    using SalesforcePartnerAPI;

    /// <summary>
    /// Salesforce user info class.
    /// </summary>
    public class UserInfo
    {
        #region Public Properties

        /// <summary>
        /// Gets or sets user SFID.
        /// </summary>
        public string UserSFID { get; set; }

        /// <summary>
        /// Gets or sets organization SFID.
        /// </summary>
        public string OrganizationSFID { get; set; }

        /// <summary>
        /// Gets or sets name of the organization.
        /// </summary>
        public string OrganizationName { get; set; }

        #endregion Public Properties
    }

    /// <summary>
    /// Salesforce object's field descriptor class.
    /// </summary>
    public class FieldDescriptor
    {
        #region Public Properties

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>The type.</value>
        public fieldType Type { get; set; }

        #endregion Public Properties
    }

    /// <summary>
    /// Salesforce service implementation.
    /// </summary>
    public class SalesforceService : ISalesforceService
    {
        #region Defines

        private const string ID_FIELD_NAME = "Id";

        private const string ERR_BINDING_IS_NOT_LOGGED_IN = "Current binding is not logged in";

        private const string ERR_ID_FIELD_IS_NOT_SET = "Id field is not set.";
        private const string ERR_ID_FIELD_IS_AUTOGENERATED = "Id field is autogenerated and not required.";

        private const string ERR_FIELDS_ARE_EMPTY = "Fields are empty.";

        private const string ERR_PROPERTY_NOT_FOUND = "Property {0} of type {1} not found.";

        #endregion Defines

        #region Nested Type: Extract Options

        /// <summary>
        /// Field extraction options class.
        /// </summary>
        class ExtractionOptions
        {
            #region Public Properties

            /// <summary>
            /// Gets or sets ExcludeGetIgnored flag.
            /// </summary>
            public bool ExcludeGetIgnored { get; set; }

            /// <summary>
            /// Gets or sets ExcludeCreateIgnored flag.
            /// </summary>
            public bool ExcludeCreateIgnored { get; set; }

            /// <summary>
            /// Gets or sets ExcludeUpdateIgnored flag.
            /// </summary>
            public bool ExcludeUpdateIgnored { get; set; }

            #endregion Public Properties
        }

        #endregion Nested Type: Extract Options

        #region Nested Type: Extractor

        /// <summary>
        /// Extractor class.
        /// </summary>
        static class Extractor
        {
            #region Private Methods

            /// <summary>
            /// Gets ignore attrbutes of proprty.
            /// </summary>
            /// <param name="property">Property info.</param>
            /// <returns>List of ignore attributes.</returns>
            private static List<IgnoreForAttribute> GetIgnoreAttributes(PropertyInfo property)
            {
                return property.GetCustomAttributes(typeof(IgnoreForAttribute), true).Cast<IgnoreForAttribute>().ToList();
            }

            #endregion Private Methods

            #region Public Methods

            /// <summary>
            /// Recursively extracts properties names.
            /// </summary>
            /// <param name="type">Type to extract.</param>
            /// <param name="typePrefix">String prefix of type.</param>
            /// <param name="options">Extraction options.</param>
            /// <returns>List of filed names.</returns>
            public static List<string> ExtractFieldNames(Type type, string typePrefix = null, ExtractionOptions options = null)
            {
                // Define result

                var result = new List<string>();

                // Get public properties

                PropertyInfo[] properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);

                // Get properties values

                foreach (PropertyInfo property in properties)
                {
                    if ((options != null) && (options.ExcludeGetIgnored))
                    {
                        var ignoreAttributes = Extractor.GetIgnoreAttributes(property);

                        if (ignoreAttributes.Any(x => x.GetType() == typeof(IgnoreForGetAttribute)))
                        {
                            continue; // skip cycle iteration for ignored field
                        }
                    }

                    if (property.GetCustomAttributes(typeof(ExtractRecursivelyAttribute), true).Length > 0)
                    {
                        result.AddRange(Extractor.ExtractFieldNames(property.PropertyType, property.Name, options));
                    }
                    else
                    {
                        // Resolve result field name

                        if (!String.IsNullOrEmpty(typePrefix))
                        {
                            result.Add(String.Format("{0}.{1}", typePrefix, property.Name));
                        }
                        else
                        {
                            result.Add(property.Name);
                        }
                    }
                }

                return result;
            }

            /// <summary>
            /// Extracts entity's properties values.
            /// </summary>
            /// <param name="entity">Entity instance.</param>
            /// <param name="options">Extract options.</param>
            /// <returns>Dictionary of property name - property value.</returns>
            public static Dictionary<string, IConvertible> ExtractFieldValues(SalesforceEntity entity, ExtractionOptions options = null)
            {
                var result = new Dictionary<string, IConvertible>();

                // Get public properties

                PropertyInfo[] properties = entity.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);

                // Get properties values

                foreach (PropertyInfo property in properties)
                {
                    // Check for ignored properties

                    bool ignoreProperty = false;

                    if (options != null)
                    {
                        var ignoredAttributes = Extractor.GetIgnoreAttributes(property);

                        if (options.ExcludeGetIgnored)
                        {
                            ignoreProperty = (ignoredAttributes.Any(x => x.GetType() == typeof(IgnoreForGetAttribute)));
                        }
                        else if ((options.ExcludeCreateIgnored) || (options.ExcludeUpdateIgnored))
                        {
                            if (ignoredAttributes.Any(x => x.GetType() == typeof(IgnoreForCreateUpdateAttribute)))
                            {
                                ignoreProperty = true;
                            }
                            else if (options.ExcludeCreateIgnored)
                            {
                                ignoreProperty = (ignoredAttributes.Any(x => x.GetType() == typeof(IgnoreForCreateAttribute)));
                            }
                            else if (options.ExcludeUpdateIgnored)
                            {
                                ignoreProperty = (ignoredAttributes.Any(x => x.GetType() == typeof(IgnoreForUpdateAttribute)));
                            }
                        }
                    }

                    // Ignore property if needed

                    if (!ignoreProperty)
                    {
                        // Get property value

                        object propertyValue = property.GetValue(entity, null);

                        if (propertyValue != null) // if value is not null
                        {
                            string resultValue = propertyValue.ToString();

                            Type underlyingType = Nullable.GetUnderlyingType(property.PropertyType);

                            if (underlyingType != null) // if has nullable type
                            {
                                if (underlyingType == typeof(DateTime))
                                {
                                    resultValue = (propertyValue as DateTime?).Value.ToString("s");
                                }
                            }
                            else // if not nullable type
                            {
                                if (property.PropertyType == typeof(DateTime))
                                {
                                    resultValue = (propertyValue as DateTime?).Value.ToString("s");
                                }
                            }

                            // Add property name - value to result

                            result.Add(property.Name, resultValue);
                        }
                        else
                        {
                            // Add null value to result

                            result.Add(property.Name, null);
                        }
                    }
                }

                return result;
            }

            #endregion Public Methods
        }

        #endregion Nested Type: Extractor

        #region Nested Type: Constructor

        /// <summary>
        /// Constructor class.
        /// </summary>
        static class Constructor
        {
            #region Public Methods

            /// <summary>
            /// Constructs sObject instance.
            /// </summary>
            /// <param name="objectTypeName">Object type name.</param>
            /// <param name="values">Object values.</param>
            /// <returns>sObject instance.</returns>
            public static sObject ConstructSObject(string objectTypeName, Dictionary<string, IConvertible> values)
            {
                // Check parameters

                if (String.IsNullOrEmpty(objectTypeName))
                {
                    throw (new ArgumentNullException("objectTypeName"));
                }
                else if (values == null)
                {
                    throw (new ArgumentNullException("values"));
                }

                var sObj = new sObject();

                // Values should not be empty

                if (values.Count != 0)
                {
                    var doc = new XmlDocument();

                    var fields = new List<XmlElement>();
                    var fieldsToNull = new List<string>();

                    foreach (KeyValuePair<string, IConvertible> value in values)
                    {
                        if (value.Value != null)
                        {
                            XmlElement field = doc.CreateElement(value.Key);

                            field.InnerText = Convert.ToString(value.Value);
                            field.IsEmpty = false;

                            fields.Add(field);
                        }
                        else
                        {
                            fieldsToNull.Add(value.Key);
                        }
                    }

                    sObj.type = objectTypeName;

                    sObj.Any = fields.ToArray();
                    sObj.fieldsToNull = fieldsToNull.ToArray();
                }

                return sObj;
            }

            /// <summary>
            /// Recursively constructs entity from sObejct.
            /// </summary>
            /// <param name="entityType"></param>
            /// <param name="sObject"></param>
            /// <returns></returns>
            public static dynamic ConstructEntity(Type entityType, XmlElement[] any)
            {
                // Check parameters

                if (entityType == null)
                {
                    throw (new ArgumentNullException("entityType"));
                }
                if (any == null)
                {
                    throw (new ArgumentNullException("any"));
                }

                // Create instance of specified type

                dynamic entity = Activator.CreateInstance(entityType);

                // Convert sObject to entity of specified type

                foreach (XmlElement node in any)
                {
                    // Try to get property by sObject fieldname

                    PropertyInfo propertyInfo = entity.GetType().GetProperty(node.LocalName);

                    if ((propertyInfo != null) && (!node.IsEmpty && node.NodeType == XmlNodeType.Element))
                    {
                        // Get property type

                        Type propertyType = propertyInfo.PropertyType;

                        // Resovle node type (simple value or complex object)

                        if (node.HasAttributes) // complex field with type (ex - sf:sObject) attribute
                        {
                            propertyInfo.SetValue(entity, Constructor.ConstructEntity(propertyType, node.ChildNodes.Cast<XmlElement>().ToArray()), null);
                        }
                        else // simple field with no type (ex - sf:sObject) attribute
                        {
                            Type underlyingType = Nullable.GetUnderlyingType(propertyType);

                            if (underlyingType != null)
                            {
                                propertyInfo.SetValue(entity, Convert.ChangeType(node.InnerText, underlyingType), null);
                            }
                            else
                            {
                                propertyInfo.SetValue(entity, Convert.ChangeType(node.InnerText, propertyType), null);
                            }
                        }
                    }
                }

                return entity;
            }

            #endregion Public Methods
        }

        #endregion Nested Type: Constructor

        #region Private Fields

        /// <summary>
        /// Salesforce service binding.
        /// </summary>
        private SforceService _binding = null;

        /// <summary>
        /// Logged in flag.
        /// </summary>
        private bool _loggedIn = false;

        /// <summary>
        /// Current Salesforce user ID.
        /// </summary>
        private UserInfo _userInfo = null;

        /// <summary>
        /// Described Salesforce globals.
        /// </summary>
        private DescribeGlobalResult _salesforceGlobals = null;

        #endregion Private Fields

        #region Public Properties

        /// <summary>
        /// Gets binding is logged in.
        /// </summary>
        public bool IsLogged
        {
            get { return this._loggedIn; }
        }

        /// <summary>
        /// Gets the user info.
        /// </summary>
        public UserInfo UserInfo
        {
            get { return this._userInfo; }
        }

        #endregion Public Properties

        #region Private Methods

        /// <summary>
        /// Checks binding connection state.
        /// </summary>
        /// <param name="throwIfNotConnected">Throw exception flag.</param>
        /// <returns>True if connected otherwise false.</returns>
        private bool CheckConnected(bool throwIfNotConnected = true)
        {
            if (!this._loggedIn)
            {
                if (throwIfNotConnected)
                {
                    throw (new InvalidOperationException(ERR_BINDING_IS_NOT_LOGGED_IN));
                }
                else { return false; }
            }

            return true;
        }

        #endregion Private Methods

        #region Public Methods

        #region Authorization

        /// <summary>
        /// Logins current binding.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="token">The token.</param>
        /// <param name="userInfo">The user info.</param>
        /// <returns>
        /// Login result.
        /// </returns>
        public bool Login(string username, string password, string token, out UserInfo userInfo)
        {
            if (!this._loggedIn)
            {
                // Try to get login result

                LoginResult loginResult = this._binding.login(username, String.Concat(password, token));

                // Set connection data

                this._binding.Url = loginResult.serverUrl;
                this._binding.SessionHeaderValue = new SessionHeader()
                {
                    sessionId = loginResult.sessionId
                };

                // Describe Salesforce globals

                this._salesforceGlobals = this._binding.describeGlobal();

                // Fill user info

                this._userInfo = new UserInfo()
                {
                    UserSFID = loginResult.userId,
                    OrganizationSFID = loginResult.userInfo.organizationId,
                    OrganizationName = loginResult.userInfo.organizationName
                };

                userInfo = this._userInfo;

                // Set logged in flag

                this._loggedIn = true;
            }
            else
            {
                userInfo = null;
            }

            return this._loggedIn;
        }

        /// <summary>
        /// Logins current binding.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="token">The token.</param>
        /// <returns>
        /// Login result.
        /// </returns>
        public bool Login(string username, string password, string token)
        {
            if (!this._loggedIn)
            {
                // Try to get login result

                LoginResult loginResult = this._binding.login(username, String.Concat(password, token));

                // Set connection data

                this._binding.Url = loginResult.serverUrl;
                this._binding.SessionHeaderValue = new SessionHeader()
                {
                    sessionId = loginResult.sessionId
                };

                // Describe Salesforce globals

                this._salesforceGlobals = this._binding.describeGlobal();

                // Fill user info

                this._userInfo = new UserInfo()
                {
                    UserSFID = loginResult.userId,
                    OrganizationSFID = loginResult.userInfo.organizationId,
                    OrganizationName = loginResult.userInfo.organizationName
                };

                // Set logged in flag

                this._loggedIn = true;
            }

            return this._loggedIn;
        }

        /// <summary>
        /// Logins current binding.
        /// </summary>
        /// <param name="token">The token.</param>
        /// <param name="userInfoResponse">The user info response.</param>
        /// <param name="userInfo">The user info.</param>
        /// <returns>
        /// Login result.
        /// </returns>
        public bool Login(TokenResponse token, UserInfoResponse userInfoResponse, out UserInfo userInfo)
        {
            if (!this._loggedIn)
            {
                // Set connection data

                if (userInfoResponse.urls.ContainsKey("partner"))
                {
                    this._binding.Url = userInfoResponse.urls["partner"].Replace("{version}", "26.0");
                    this._binding.SessionHeaderValue = new SessionHeader()
                    {
                        sessionId = token.access_token
                    };
                }
                else
                {
                    throw (new InvalidOperationException());
                }

                // Describe Salesforce globals

                this._salesforceGlobals = this._binding.describeGlobal();

                // Get user info from Salesforce

                var info = this.GetUserInfo();

                this._userInfo = new UserInfo()
                {
                    UserSFID = userInfoResponse.user_id,
                    OrganizationSFID = userInfoResponse.organization_id,
                    OrganizationName = info.organizationName
                };

                userInfo = this._userInfo;

                // Set logged in flag

                this._loggedIn = true;
            }
            else
            {
                userInfo = null;
            }

            return this._loggedIn;
        }

        /// <summary>
        /// Logins current binding.
        /// </summary>
        /// <param name="token">The token.</param>
        /// <param name="userInfoResponse">The user info response.</param>
        /// <returns>
        /// Login result.
        /// </returns>
        public bool Login(TokenResponse token, UserInfoResponse userInfoResponse)
        {
            if (!this._loggedIn)
            {
                // Set connection data

                if (userInfoResponse.urls.ContainsKey("partner"))
                {
                    this._binding.Url = userInfoResponse.urls["partner"].Replace("{version}", "25.0");
                    this._binding.SessionHeaderValue = new SessionHeader()
                    {
                        sessionId = token.access_token
                    };
                }
                else
                {
                    throw (new InvalidOperationException());
                }

                // Describe Salesforce globals

                this._salesforceGlobals = this._binding.describeGlobal();

                // Get user info from Salesforce

                var info = this.GetUserInfo();

                this._userInfo = new UserInfo()
                {
                    UserSFID = userInfoResponse.user_id,
                    OrganizationSFID = userInfoResponse.organization_id,
                    OrganizationName = info.organizationName
                };

                // Set logged in flag

                this._loggedIn = true;
            }

            return this._loggedIn;
        }

        /// <summary>
        /// Logouts current user.
        /// </summary>
        public void Logout()
        {
            this._loggedIn = false;
        }

        #endregion Authorization

        #region Support Methods

        /// <summary>
        /// Gets the user info.
        /// </summary>
        /// <returns>User Info.</returns>
        public GetUserInfoResult GetUserInfo()
        {
            GetUserInfoResult result = null;

            if (this.CheckConnected())
            {
                result = this._binding.getUserInfo();
            }

            return result;
        }

        /// <summary>
        /// Gets fields list of specified object.
        /// </summary>
        /// <param name="objectTypeName">Object type name.</param>
        /// <returns>List of fields.</returns>
        public List<FieldDescriptor> GetFields(string objectTypeName)
        {
            var result = new List<FieldDescriptor>();

            if (this.CheckConnected())
            {
                if (String.IsNullOrEmpty(objectTypeName))
                {
                    throw (new ArgumentNullException("objectTypeName"));
                }

                // Get fields of specified object type

                DescribeSObjectResult describeResult = this._binding.describeSObject(objectTypeName);

                // Get field descriptors

                if (describeResult != null)
                {
                    result = describeResult.fields.Select
                        (
                            q => new FieldDescriptor()
                            {
                                Name = q.name,
                                Type = q.type
                            }
                        )
                        .ToList();
                }
            }

            return result;
        }

        /// <summary>
        /// Gets object type by object ID.
        /// </summary>
        /// <param name="objectTypeName">Object ID.</param>
        /// <returns>Object type.</returns>
        public string GetObjectType(string objectId)
        {
            if (String.IsNullOrEmpty(objectId))
            {
                throw (new ArgumentNullException("objectId"));
            }

            // Get key prefix

            var keyPrefix = objectId.Substring(0, 3);

            // Get object descriptor by prefix

            var objectDescriptor = this._salesforceGlobals.sobjects
                .Where(x => (x.keyPrefix == keyPrefix))
                .FirstOrDefault();

            // Return object type name

            return (objectDescriptor != null)
                ? objectDescriptor.name
                : null;
        }

        /// <summary>
        /// Counts records of type.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="objectTypeName">Type of sObject.</param>
        /// <param name="whereClause">Where clause.</param>
        /// <returns>Count of records with where clause if it set otherwise all record.</returns>
        public int CountRecords(string objectTypeName, string whereClause = null)
        {
            if (this.CheckConnected())
            {
                // Define query string

                string queryString = String.Format
                    (
                        "select COUNT() from {0}",
                        objectTypeName
                    );

                // If where clause is not null or empty
                // when add it to query string

                if (!String.IsNullOrEmpty(whereClause))
                {
                    queryString = String.Format
                        (
                            "{0} {1}",
                            queryString,
                            whereClause
                        );
                }

                // Try to request data

                QueryResult qr = this._binding.query(queryString);

                return qr.size;
            }

            return 0;
        }

        /// <summary>
        /// Counts records of type.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="whereClause">Where clause.</param>
        /// <returns>Count of records with where clause if it set otherwise all record.</returns>
        public int CountRecords<T>(string whereClause = null) where T : SalesforceEntity
        {
            if (this.CheckConnected())
            {
                // Get object type name

                string objectTypeName = typeof(T).Name;

                // Build query string

                string queryString = String.Format("select COUNT() from {0}", objectTypeName);

                // If where clause is not null or empty 
                // when add it to query string

                if (!String.IsNullOrEmpty(whereClause))
                {
                    queryString = String.Format("{0} where {1}", queryString, whereClause);
                }

                // Try to request data

                QueryResult qr = this._binding.query(queryString);

                return qr.size;
            }

            return 0;
        }

        #endregion Support Methods

        #region CRUD: Get Objects

        /// <summary>
        /// Gets Salesforce objects.
        /// </summary>
        /// <param name="objectTypeName">Object type name.</param>
        /// <param name="fieldNames">Fields for selection.</param>
        /// <param name="whereClause">Where clause.</param>
        /// <returns>List of sObject.</returns>
        public List<sObject> GetObjects(string objectTypeName, List<string> fieldNames, string whereClause = null)
        {
            var result = new List<sObject>();

            if (this.CheckConnected())
            {
                // Check parameters

                if (fieldNames == null)
                {
                    throw (new ArgumentNullException("fieldNames"));
                }
                if (String.IsNullOrEmpty(objectTypeName))
                {
                    throw (new ArgumentNullException("objectTypeName"));
                }

                // Field names should not be empty

                if (fieldNames.Count > 0)
                {
                    // Add ID field to query if it not exists

                    if (!fieldNames.Exists(q => q.Equals(ID_FIELD_NAME, StringComparison.InvariantCultureIgnoreCase)))
                    {
                        fieldNames.Insert(0, ID_FIELD_NAME);
                    }

                    // Get query string

                    string queryString = String.Format("select {0} from {1}", String.Join(", ", fieldNames), objectTypeName);

                    // Append where clause

                    if (!String.IsNullOrEmpty(whereClause))
                    {
                        queryString = String.Format("{0} where {1}", queryString, whereClause);
                    }

                    // Try to get query result

                    QueryResult qr = this._binding.queryAll(queryString);

                    // Get records

                    if ((qr.done) && (qr.size > 0))
                    {
                        result = qr.records.ToList();
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Gets Salesforce objects.
        /// </summary>
        /// <param name="fieldNames">Fields for selection.</param>
        /// <param name="whereClause">Where clause.</param>
        /// <returns>List of entities.</returns>
        public List<T> GetObjects<T>(List<string> fieldNames, string whereClause = null) where T : SalesforceEntity
        {
            var result = new List<T>();

            if (this.CheckConnected())
            {
                // Check parameters

                if (fieldNames == null)
                {
                    throw (new ArgumentNullException("fieldNames"));
                }

                // Field names should not be empty

                if (fieldNames.Count > 0)
                {
                    // Add ID field to query if it not exists

                    if (!fieldNames.Exists(q => q.Equals(ID_FIELD_NAME, StringComparison.InvariantCultureIgnoreCase)))
                    {
                        fieldNames.Insert(0, ID_FIELD_NAME);
                    }

                    // Build query string

                    string queryString = String.Format("select {0} from {1}", String.Join(", ", fieldNames), typeof(T).Name);

                    // Append where clause

                    if (!String.IsNullOrEmpty(whereClause))
                    {
                        queryString = String.Format("{0} where {1}", queryString, whereClause);
                    }

                    // Try to get query result

                    QueryResult qr = this._binding.queryAll(queryString);

                    if ((qr.done) && (qr.size > 0))
                    {
                        foreach (sObject sObject in qr.records.ToList())
                        {
                            // Convert sObject to enitity

                            result.Add(Constructor.ConstructEntity(typeof(T), sObject.Any));
                        }
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Gets Salesforce objects.
        /// </summary>
        /// <param name="whereClause">Where clause.</param>
        /// <returns>List of entities.</returns>
        public List<T> GetObjects<T>(string whereClause = null) where T : SalesforceEntity
        {
            var result = new List<T>();

            if (this.CheckConnected())
            {
                // Extract current field names

                var fieldNames = Extractor.ExtractFieldNames(typeof(T));

                // Field names should not be empty

                if (fieldNames.Count > 0)
                {
                    // Build query string

                    string queryString = String.Format("select {0} from {1}", String.Join(", ", fieldNames), typeof(T).Name);

                    // Append where clause

                    if (!String.IsNullOrEmpty(whereClause))
                    {
                        queryString = String.Format("{0} where {1}", queryString, whereClause);
                    }

                    // Try to get query result

                    QueryResult qr = this._binding.queryAll(queryString);

                    if ((qr.done) && (qr.size > 0))
                    {
                        // Convert sObjects to entities

                        foreach (sObject sObject in qr.records.ToList())
                        {
                            result.Add(Constructor.ConstructEntity(typeof(T), sObject.Any));
                        }
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        #endregion CRUD: Get Objects

        #region CRUD: Create Object

        /// <summary>
        /// Creates Salesforce.
        /// </summary>
        /// <param name="objectTypeName">Object type name.</param>
        /// <param name="values">Object values.</param>
        /// <returns>Operation result.</returns>
        public bool CreateObject(string objectTypeName, Dictionary<string, IConvertible> values)
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (String.IsNullOrEmpty(objectTypeName))
                {
                    throw (new ArgumentNullException("objectTypeName"));
                }
                if (values == null)
                {
                    throw (new ArgumentNullException("values"));
                }

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (!values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.create
                            (
                                new sObject[] { Constructor.ConstructSObject(objectTypeName, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_AUTOGENERATED));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Creates Salesforce object.
        /// </summary>
        /// <param name="values">Object values.</param>
        /// <returns>Operation result.</returns>
        public bool CreateObject<T>(Dictionary<string, IConvertible> values) where T : SalesforceEntity
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (values == null)
                {
                    throw (new ArgumentNullException("values"));
                }

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (!values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.create
                            (
                                new sObject[] { Constructor.ConstructSObject(typeof(T).Name, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_AUTOGENERATED));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Creates Salesforce object.
        /// </summary>
        /// <param name="entity">Entity.</param>
        /// <returns>Operation result.</returns>
        public bool CreateObject(SalesforceEntity entity)
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (entity == null)
                {
                    throw (new ArgumentNullException("entity"));
                }

                // Extract current entity values

                Dictionary<string, IConvertible> values = Extractor.ExtractFieldValues
                    (
                        entity, new ExtractionOptions() { ExcludeCreateIgnored = true }
                    );

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (!values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.create
                            (
                                new sObject[] { Constructor.ConstructSObject(entity.GetType().Name, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_AUTOGENERATED));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        #endregion CRUD: Create Object

        #region CRUD: Update Object

        /// <summary>
        /// Updates Salesforce object.
        /// </summary>
        /// <param name="objectTypeName">Object type name.</param>
        /// <param name="values">Object values.</param>
        /// <returns>Operation result.</returns>
        public bool UpdateObject(string objectTypeName, Dictionary<string, IConvertible> values)
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (String.IsNullOrEmpty(objectTypeName))
                {
                    throw (new ArgumentNullException("objectTypeName"));
                }
                if (values == null)
                {
                    throw (new ArgumentNullException("values"));
                }

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.update
                            (
                                new sObject[] { Constructor.ConstructSObject(objectTypeName, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_NOT_SET));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Updates Salesforce object.
        /// </summary>
        /// <param name="values">Object values.</param>
        /// <returns>Operation result.</returns>
        public bool UpdateObject<T>(Dictionary<string, IConvertible> values) where T : SalesforceEntity
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (values == null)
                {
                    throw (new ArgumentNullException("values"));
                }

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.update
                            (
                                new sObject[] { Constructor.ConstructSObject(typeof(T).Name, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_NOT_SET));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        /// <summary>
        /// Updates Salesforce object.
        /// </summary>
        /// <param name="entity">Entity.</param>
        /// <returns>Operation result.</returns>
        public bool UpdateObject(SalesforceEntity entity)
        {
            bool result = false;

            if (this.CheckConnected())
            {
                // Check parameters

                if (entity == null)
                {
                    throw (new ArgumentNullException("entity"));
                }

                // Extract current values of entity

                Dictionary<string, IConvertible> values = Extractor.ExtractFieldValues
                    (
                        entity, new ExtractionOptions() { ExcludeUpdateIgnored = true }
                    );

                // Values should not be empty

                if (values.Count > 0)
                {
                    // Construct Salesforce object

                    if (values.ContainsKey(ID_FIELD_NAME))
                    {
                        SaveResult[] saveResults = this._binding.update
                            (
                                new sObject[] { Constructor.ConstructSObject(entity.GetType().Name, values) }
                            );

                        result = ((saveResults.Length > 0) && (saveResults[0].success));
                    }
                    else
                    {
                        throw (new InvalidOperationException(ERR_ID_FIELD_IS_NOT_SET));
                    }
                }
                else
                {
                    throw (new InvalidOperationException(ERR_FIELDS_ARE_EMPTY));
                }
            }

            return result;
        }

        #endregion CRUD: Update Object

        #region CRUD: Delete Object

        /// <summary>
        /// Deletes Salesforce object by ID.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool DeleteObject(string id)
        {
            bool result = false;

            if (this.CheckConnected())
            {
                if (!String.IsNullOrEmpty(id))
                {
                    // Try to delete record

                    DeleteResult[] deleteResults = this._binding.delete(new string[] { id });

                    // Get result

                    result = ((deleteResults.Length > 0) && (deleteResults[0].success));
                }
                else
                {
                    throw (new InvalidOperationException(ERR_ID_FIELD_IS_NOT_SET));
                }
            }

            return result;
        }

        #endregion CRUD: Delete Object

        #endregion Public Methods

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public SalesforceService()
        {
            this._binding = new SforceService { Timeout = 60000 };
        }

        #endregion Constructors
    }
}